{"version":3,"sources":["Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","img","main","temp","minTemp","maxTemp","hum","clouds","className","src","alt","App","state","isLoading","data","API_URL","process","axios","get","then","response","weather","setState","icon","this","getWeathers","imgUrl","description","temp_min","temp_max","humidity","all","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2RAqBeA,MAlBf,YAAsE,IAAnDC,EAAkD,EAAlDA,IAAKC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,OAEvD,OACI,sBAAKC,UAAU,UAAf,UACI,mEACA,qBAAKC,IAAKR,EAAKS,IAAI,YACnB,4BAAIR,IACJ,uCAAUC,EAAV,WACA,8BACI,uBAAMK,UAAU,MAAhB,UAAuBH,EAAvB,UADJ,KAEI,uBAAMG,UAAU,MAAhB,cAAwBJ,EAAxB,aAEJ,yCAAYG,EAAZ,OACA,2CAAcD,EAAd,W,iBCmDGK,E,4MA3DXC,MAAQ,CACJC,WAAW,EACXZ,IAAK,GACLa,KAAM,I,4DAGK,IAAD,OAEJC,EAAO,qFADGC,oCAKhBC,IAAMC,IAAIH,GAASI,MAAK,SAACC,GAErB,IAAMN,EAAOM,EAASN,KAEhBO,EAAUP,EAAKO,QAAQ,GAE7B,EAAKC,SAAS,CACVrB,IAAKoB,EAAQE,KACbV,WAAW,EACXC,KAAMA,S,0CAMdU,KAAKC,gB,+BAGC,IAAD,EAC4BD,KAAKZ,MAA9BC,EADH,EACGA,UAAWZ,EADd,EACcA,IAAKa,EADnB,EACmBA,KAElBY,EAAM,0CAAsCzB,EAAtC,QAEZ,OACI,yBAASO,UAAU,YAAnB,SACKK,EACG,qBAAKL,UAAU,SAAf,SACI,sBAAMA,UAAU,cAAhB,0BAGJ,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,CACIP,IAAKyB,EACLxB,KAAMY,EAAKO,QAAQ,GAAGM,YACtBxB,KAAMW,EAAKZ,KAAKC,KAChBC,QAASU,EAAKZ,KAAK0B,SACnBvB,QAASS,EAAKZ,KAAK2B,SACnBvB,IAAKQ,EAAKZ,KAAK4B,SACfvB,OAAQO,EAAKP,OAAOwB,c,GAnD9BC,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.0435df85.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Weather.css\";\n\nfunction Weather({ img, main, temp, minTemp, maxTemp, hum, clouds }) {\n    // console.log(id);\n    return (\n        <div className=\"weather\">\n            <p>Your current weather at Seoul is: </p>\n            <img src={img} alt=\"weather\" />\n            <p>{main}</p>\n            <p>temp: {temp}°C</p>\n            <p>\n                <span className=\"max\">{maxTemp}°</span> /\n                <span className=\"min\"> {minTemp}°</span>\n            </p>\n            <p>clouds: {clouds}%</p>\n            <p>humidity: {hum}%</p>\n        </div>\n    );\n}\n\nexport default Weather;\n","// import logo from \"./logo.svg\";\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./Weather\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n    state = {\n        isLoading: true,\n        img: \"\",\n        data: {},\n    };\n\n    getWeathers() {\n        const API_KEY = process.env.REACT_APP_API_KEY;\n        const API_URL = `https://api.openweathermap.org/data/2.5/weather?q=Seoul&units=metric&appid=${API_KEY}`;\n\n        // console.log(API_URL);\n\n        axios.get(API_URL).then((response) => {\n            // console.log(response);\n            const data = response.data;\n            // console.log(data);\n            const weather = data.weather[0];\n\n            this.setState({\n                img: weather.icon,\n                isLoading: false,\n                data: data,\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.getWeathers();\n    }\n\n    render() {\n        const { isLoading, img, data } = this.state;\n        // console.log(weathers);\n        const imgUrl = `http://openweathermap.com/img/w/${img}.png`;\n\n        return (\n            <section className=\"container\">\n                {isLoading ? (\n                    <div className=\"loader\">\n                        <span className=\"loader_text\">Loading...</span>\n                    </div>\n                ) : (\n                    <div className=\"weathers\">\n                        <Weather\n                            img={imgUrl}\n                            main={data.weather[0].description}\n                            temp={data.main.temp}\n                            minTemp={data.main.temp_min}\n                            maxTemp={data.main.temp_max}\n                            hum={data.main.humidity}\n                            clouds={data.clouds.all}\n                        />\n                    </div>\n                )}\n            </section>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}